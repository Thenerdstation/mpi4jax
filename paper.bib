@article{hafner_veros_2018,
  title    = {Veros v0.1 – a fast and versatile ocean simulator in pure {Python}},
  volume   = {11},
  issn     = {1991-959X},
  url      = {https://gmd.copernicus.org/articles/11/3299/2018/},
  doi      = {10.5194/gmd-11-3299-2018},
  abstract = {{\textless}p{\textgreater}{\textless}strong class="journal-contentHeaderColor"{\textgreater}Abstract.{\textless}/strong{\textgreater} A general circulation ocean model is translated from Fortran to Python. Its code structure is optimized to exploit available Python utilities, remove simulation bottlenecks, and comply with modern best practices. Furthermore, support for Bohrium is added, a framework that provides a just-in-time compiler for array operations and that supports parallel execution on both CPU and GPU targets.{\textless}/p{\textgreater} {\textless}p{\textgreater}For applications containing more than a million grid elements, such as a typical {\textless}span class="inline-formula"{\textgreater}{\textless}math xmlns="http://www.w3.org/1998/Math/MathML" id="M1" display="inline" overflow="scroll" dspmath="mathml"{\textgreater}{\textless}mrow{\textgreater}{\textless}msup{\textgreater}{\textless}mn mathvariant="normal"{\textgreater}1{\textless}/mn{\textgreater}{\textless}mo{\textgreater}∘{\textless}/mo{\textgreater}{\textless}/msup{\textgreater}{\textless}mo{\textgreater}×{\textless}/mo{\textgreater}{\textless}msup{\textgreater}{\textless}mn mathvariant="normal"{\textgreater}1{\textless}/mn{\textgreater}{\textless}mo{\textgreater}∘{\textless}/mo{\textgreater}{\textless}/msup{\textgreater}{\textless}/mrow{\textgreater}{\textless}/math{\textgreater}{\textless}span{\textgreater}{\textless}svg:svg xmlns:svg="http://www.w3.org/2000/svg" width="34pt" height="11pt" class="svg-formula" dspmath="mathimg" md5hash="cb533c0820352f32a7ca953bf25ffe4a"{\textgreater}{\textless}svg:image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="gmd-11-3299-2018-ie00001.svg" width="34pt" height="11pt" src="gmd-11-3299-2018-ie00001.png"/{\textgreater}{\textless}/svg:svg{\textgreater}{\textless}/span{\textgreater}{\textless}/span{\textgreater} horizontal resolution global ocean model, Veros is approximately half as fast as the MPI-parallelized Fortran base code on 24 CPUs and as fast as the Fortran reference when running on a high-end GPU. By replacing the original conjugate gradient stream function solver with a solver from the pyAMG Python package, this particular subroutine outperforms the corresponding Fortran version by up to 1 order of magnitude.{\textless}/p{\textgreater} {\textless}p{\textgreater}The study is concluded with a simple application in which the North Atlantic wave response to a Southern Ocean wind perturbation is investigated. It is found that even in a realistic setting the phase speeds of boundary waves matched the expectations based on theory and idealized models.{\textless}/p{\textgreater}},
  language = {English},
  number   = {8},
  urldate  = {2021-03-19},
  journal  = {Geoscientific Model Development},
  author   = {Häfner, Dion and Jacobsen, René Løwe and Eden, Carsten and Kristensen, Mads R. B. and Jochum, Markus and Nuterman, Roman and Vinter, Brian},
  month    = aug,
  year     = {2018},
  note     = {Publisher: Copernicus GmbH},
  pages    = {3299--3312},
  file     = {Full Text PDF:/Users/dion/Seafile/library/zotero/storage/PEAEVRVH/Häfner et al. - 2018 - Veros v0.1 – a fast and versatile ocean simulator .pdf:application/pdf;Snapshot:/Users/dion/Seafile/library/zotero/storage/KE9Q3LHK/2018.html:text/html}
}


@article{carleo_netket_2019,
  title      = {{NetKet}: {A} machine learning toolkit for many-body quantum systems},
  volume     = {10},
  issn       = {2352-7110},
  shorttitle = {{NetKet}},
  url        = {https://www.sciencedirect.com/science/article/pii/S2352711019300974},
  doi        = {10.1016/j.softx.2019.100311},
  abstract   = {We introduce NetKet, a comprehensive open source framework for the study of many-body quantum systems using machine learning techniques. The framework is built around a general and flexible implementation of neural-network quantum states, which are used as a variational ansatz for quantum wavefunctions. NetKet provides algorithms for several key tasks in quantum many-body physics and quantum technology, namely quantum state tomography, supervised learning from wavefunction data, and ground state searches for a wide range of customizable lattice models. Our aim is to provide a common platform for open research and to stimulate the collaborative development of computational methods at the interface of machine learning and many-body physics.},
  language   = {en},
  urldate    = {2021-03-19},
  journal    = {SoftwareX},
  author     = {Carleo, Giuseppe and Choo, Kenny and Hofmann, Damian and Smith, James E. T. and Westerhout, Tom and Alet, Fabien and Davis, Emily J. and Efthymiou, Stavros and Glasser, Ivan and Lin, Sheng-Hsuan and Mauri, Marta and Mazzola, Guglielmo and Mendl, Christian B. and van Nieuwenburg, Evert and O’Reilly, Ossian and Théveniaut, Hugo and Torlai, Giacomo and Vicentini, Filippo and Wietek, Alexander},
  month      = jul,
  year       = {2019},
  keywords   = {Machine learning, Neural-network quantum states, Quantum state tomography, Supervised learning, Variational Monte Carlo},
  pages      = {100311},
  file       = {ScienceDirect Full Text PDF:/Users/dion/Seafile/library/zotero/storage/TVBHSFZB/Carleo et al. - 2019 - NetKet A machine learning toolkit for many-body q.pdf:application/pdf;ScienceDirect Snapshot:/Users/dion/Seafile/library/zotero/storage/JZPQR67X/S2352711019300974.html:text/html}
}


@techreport{mpistandard,
author = {Forum, Message P},
title = {MPI: A Message-Passing Interface Standard},
year = {1994},
publisher = {University of Tennessee},
address = {USA},
abstract = {The Message Passing Interface Forum (MPIF), with participation from over 40 organizations, has been meeting since November 1992 to discuss and define a set of library standards for message passing. MPIF is not sanctioned or supported by any official standards organization. The goal of the Message Passing Interface, simply stated, is to develop a widely used standard for writing message-passing programs. As such the interface should establish a practical, portable, efficient and flexible standard for message passing. , This is the final report, Version 1.0, of the Message Passing Interface Forum. This document contains all the technical features proposed for the interface. This copy of the draft was processed by LATEX on April 21, 1994. , Please send comments on MPI to mpi-comments@cs.utk.edu. Your comment will be forwarded to MPIF committee members who will attempt to respond.}
}


@article{mpi4py,
  title    = {MPI for Python},
  journal  = {Journal of Parallel and Distributed Computing},
  volume   = {65},
  number   = {9},
  pages    = {1108-1115},
  year     = {2005},
  issn     = {0743-7315},
  doi      = {10.1016/j.jpdc.2005.03.010},
  url      = {https://www.sciencedirect.com/science/article/pii/S0743731505000560},
  author   = {Lisandro Dalcín and Rodrigo Paz and Mario Storti},
  keywords = {Message passing, MPI, High level languages, Parallel Python},
  abstract = {MPI for Python provides bindings of the Message Passing Interface (MPI) standard for the Python programming language and allows any Python program to exploit multiple processors. This package is constructed on top of the MPI-1 specification and defines an object-oriented interface which closely follows MPI-2 C++bindings. It supports point-to-point (sends, receives) and collective (broadcasts, scatters, gathers) communications of general Python objects. Efficiency has been tested in a Beowulf class cluster and satisfying results were obtained. MPI for Python is open source and available for download on the web (http://www.cimec.org.ar/python).}
}


@software{jax,
  author  = {James Bradbury and Roy Frostig and Peter Hawkins and Matthew James Johnson and Chris Leary and Dougal Maclaurin and George Necula and Adam Paszke and Jake Vander{P}las and Skye Wanderman-{M}ilne and Qiao Zhang},
  title   = {{JAX}: composable transformations of {P}ython+{N}um{P}y programs},
  url     = {http://github.com/google/jax},
  version = {0.2.5},
  year    = {2018}
}


@article{numpy,
  title     = {Array programming with {NumPy}},
  author    = {Charles R. Harris and K. Jarrod Millman and St{'{e}}fan J.
                 van der Walt and Ralf Gommers and Pauli Virtanen and David
                 Cournapeau and Eric Wieser and Julian Taylor and Sebastian
                 Berg and Nathaniel J. Smith and Robert Kern and Matti Picus
                 and Stephan Hoyer and Marten H. van Kerkwijk and Matthew
                 Brett and Allan Haldane and Jaime Fern{'{a}}ndez del
                 R{'{\i}}o and Mark Wiebe and Pearu Peterson and Pierre
                 G{'{e}}rard-Marchant and Kevin Sheppard and Tyler Reddy and
                 Warren Weckesser and Hameer Abbasi and Christoph Gohlke and
                 Travis E. Oliphant},
  year      = {2020},
  month     = sep,
  journal   = {Nature},
  volume    = {585},
  number    = {7825},
  pages     = {357--362},
  doi       = {10.1038/s41586-020-2649-2},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1038/s41586-020-2649-2}
}


@article{cython,
  author     = {Behnel, Stefan and Bradshaw, Robert and Citro, Craig and Dalcin, Lisandro and Seljebotn, Dag Sverre and Smith, Kurt},
  title      = {Cython: The Best of Both Worlds},
  year       = {2011},
  issue_date = {March 2011},
  publisher  = {IEEE Educational Activities Department},
  address    = {USA},
  volume     = {13},
  number     = {2},
  issn       = {1521-9615},
  url        = {https://doi.org/10.1109/MCSE.2010.118},
  doi        = {10.1109/MCSE.2010.118},
  abstract   = {Cython is a Python language extension that allows explicit type declarations and is compiled directly to C. As such, it addresses Python's large overhead for numerical loops and the difficulty of efficiently using existing C and Fortran code, which Cython can interact with natively.},
  journal    = {Computing in Science and Engg.},
  month      = mar,
  pages      = {31–39},
  numpages   = {9},
  keywords   = {scientific computing, Cython, numerics, Python}
}


@misc{pyhpc-benchmarks,
  author    = {Häfner, Dion},
  title     = {PyHPC benchmarks},
  year      = {2020},
  publisher = {GitHub},
  journal   = {GitHub repository},
  url       = {https://github.com/dionhaefner/pyhpc-benchmarks}
}


@article{diffprog1,
  title     = {Kohn-Sham Equations as Regularizer: Building Prior Knowledge into Machine-Learned Physics},
  author    = {Li, Li and Hoyer, Stephan and Pederson, Ryan and Sun, Ruoxi and Cubuk, Ekin D. and Riley, Patrick and Burke, Kieron},
  journal   = {Phys. Rev. Lett.},
  volume    = {126},
  issue     = {3},
  pages     = {036401},
  numpages  = {7},
  year      = {2021},
  month     = {Jan},
  publisher = {American Physical Society},
  doi       = {10.1103/PhysRevLett.126.036401},
  url       = {https://link.aps.org/doi/10.1103/PhysRevLett.126.036401}
}


@article{diffprog2,
  doi     = {10.3389/fnbot.2019.00006},
  year    = {2019},
  month   = mar,
  volume  = {13},
  author  = {Jonas Degrave and Michiel Hermans and Joni Dambre and Francis wyffels},
  title   = {A Differentiable Physics Engine for Deep Learning in Robotics},
  journal = {Frontiers in Neurorobotics}
}

@article{Bezanson2017,
  doi = {10.1137/141000671},
  url = {https://doi.org/10.1137/141000671},
  year = {2017},
  month = jan,
  publisher = {Society for Industrial {\&} Applied Mathematics ({SIAM})},
  volume = {59},
  number = {1},
  pages = {65--98},
  author = {Jeff Bezanson and Alan Edelman and Stefan Karpinski and Viral B. Shah},
  title = {Julia: A Fresh Approach to Numerical Computing},
  journal = {{SIAM} Review}
}
